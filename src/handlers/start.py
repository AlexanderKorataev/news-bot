from aiogram import Router, types
# from src.database import Database
# from src.config import MONGO_URI
# from aiogram import Bot, Dispatcher, html
# from aiogram.client.default import DefaultBotProperties
# from aiogram.enums import ParseMode
from src.database.database import Database
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import CommandStart, Command

start_router = Router()
db = Database()
# def get_subscribe_keyboard():
#     builder = InlineKeyboardBuilder()
#     builder.button(
#         text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚úÖ",
#         callback_data="subscribe"
#     )

#     builder.adjust(1)

#     return builder.as_markup()

# @start_router.message(CommandStart())
# async def start_command(message: types.Message):
    
#     await message.answer(
# """–ü—Ä–∏–≤–µ—Ç! üëã

# –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å.

# –ö–æ–º–∞–Ω–¥—ã:
# /subscribe - –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.
# /unsubscribe - –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.
# /help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.""", reply_markup=get_subscribe_keyboard()
# )






# db = Database(mongo_uri=MONGO_URI)


# @router.message(Command("addnews"))
# async def add_news(message: types.Message):
#     news = message.text[len("/addnews "):]
#     await db.add_news({"news": news})
#     await message.answer("–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

# @router.message(Command("getnews"))
# async def get_news(message: types.Message):
#     news_list = await db.get_news()
#     response = "\n".join([item["news"] for item in news_list])
#     await message.answer(f"–ù–æ–≤–æ—Å—Ç–∏:\n{response}")# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã


#     builder = InlineKeyboardBuilder()
#     builder.button(
#         text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚úÖ",
#         callback_data="subscribe"
#     )

#     builder.adjust(1)

#     return builder.as_markup()



def get_subscribe_keyboard(is_subscribed):
    if is_subscribed:
        return InlineKeyboardBuilder().button(
        text="–û—Ç–ø–∏—Å–∞—Ç—å—Å—è üö´",
        callback_data="unsubscribe"
    ).adjust(1).as_markup()
    else:
        return InlineKeyboardBuilder().button(
        text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è ‚úÖ",
        callback_data="subscribe"
    ).adjust(1).as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@start_router.message(CommandStart())
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await db.add_user(user_id, username)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_subscribed = await db.check_subscription(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        """–ü—Ä–∏–≤–µ—Ç! üëã

–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å.

–ö–æ–º–∞–Ω–¥—ã:
/subscribe - –ü–æ–¥–∫–ª—é—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.
/unsubscribe - –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.
/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.""",
        reply_markup=get_subscribe_keyboard(is_subscribed)
    )

