from aiogram import Router, types, F
# from src.database import Database
# from src.config import MONGO_URI
# from aiogram import Bot, Dispatcher, html
# from aiogram.client.default import DefaultBotProperties
# from aiogram.enums import ParseMode
from src.database.database import Database
from aiogram.filters import CommandStart, Command

news_router = Router()
db = Database()
# @news_router.callback_query(F.data == "subscribe")
# async def subscribe(callback: types.CallbackQuery):
#         await callback.message.answer(
# """–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É! üì∞
# –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏."""
# )

# @news_router.callback_query(F.data == "unsubscribe")
# async def unsubscribe(callback: types.CallbackQuery):
#         await callback.message.answer(
# """–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É. 
# –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /subscribe."""
# )

# @news_router.callback_query(F.data == "subscribe")
# async def subscribe(callback: types.CallbackQuery):
#     user_id = callback.from_user.id
#     username = callback.from_user.username

#     await db.add_user(user_id, username)
#     await db.update_subscription(user_id, True)
    
#     await callback.message.answer(
#         """–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É! üì∞
# –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏."""
#     )


# @news_router.callback_query(F.data == "unsubscribe")
# async def unsubscribe(callback: types.CallbackQuery):
#     user_id = callback.from_user.id
#     await db.update_subscription(user_id, False)

#     await callback.message.answer(
#         """–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É. 
# –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /subscribe."""
#     )




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
@news_router.callback_query(F.data.in_({"subscribe", "unsubscribe"}))
async def handle_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    if callback.data == "subscribe":
        await db.update_subscription(user_id, True)
        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É! üì∞")
    elif callback.data == "unsubscribe":
        await db.update_subscription(user_id, False)
        await callback.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await db.check_subscription(user_id)
    await callback.message.edit_reply_markup(reply_markup=get_subscribe_keyboard(is_subscribed))









# @router.message(Command("addnews"))
# async def add_news(message: types.Message):
#     news = message.text[len("/addnews "):]
#     await db.add_news({"news": news})
#     await message.answer("–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

# @router.message(Command("getnews"))
# async def get_news(message: types.Message):
#     news_list = await db.get_news()
#     response = "\n".join([item["news"] for item in news_list])
#     await message.answer(f"–ù–æ–≤–æ—Å—Ç–∏:\n{response}")